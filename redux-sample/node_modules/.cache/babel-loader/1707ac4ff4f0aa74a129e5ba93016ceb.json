{"ast":null,"code":"import { takeEvery, call, put, select, take, fork, all, takeLatest } from 'redux-saga/effects';\nimport * as Types from '../actions/types';\nimport { getDataFromServer, deleteTodoAPI } from '../service';\nconst baseURL = '';\n\nfunction* fetchLoginUser(action) {\n  // function to make service call \n  try {\n    console.log(\"Action -> \" + JSON.stringify(action));\n    let formBody = {};\n    formBody.firstName = \"Juveria\"; // action.code\n\n    formBody.lastName = \"S\"; //action.provider\n\n    formBody.age = \"24\";\n    const requestMethod = \"GET\";\n    const loginURL = baseURL + '/view';\n    ;\n    const response = yield call(getDataFromServer, loginURL, '', '');\n    const result = yield response.json();\n    console.log(\"ADS\" + result.workingDetails);\n    console.log(\"Result ->\" + JSON.stringify(result));\n    console.log('Result JSON' + result);\n\n    if (result.error) {\n      yield put({\n        type: \"LOGIN_USER_RESPONSE_FAIL\",\n        error: result.error\n      });\n    } else {\n      yield put({\n        type: Types.LOGIN_USER_RESPONSE_SUCCESS,\n        result\n      });\n    }\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport default function* rootSaga() {\n  yield takeLatest(Types.LOGIN_USER, fetchLoginUser);\n  console.log(\" Root Saga\");\n}","map":{"version":3,"sources":["C:/Users/juver/codingStuff/reactJS/redux-sample/src/redux/store/sagas.js"],"names":["takeEvery","call","put","select","take","fork","all","takeLatest","Types","getDataFromServer","deleteTodoAPI","baseURL","fetchLoginUser","action","console","log","JSON","stringify","formBody","firstName","lastName","age","requestMethod","loginURL","response","result","json","workingDetails","error","type","LOGIN_USER_RESPONSE_SUCCESS","rootSaga","LOGIN_USER"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,MAA/B,EAAuCC,IAAvC,EAA6CC,IAA7C,EAAmDC,GAAnD,EAAwDC,UAAxD,QAA0E,oBAA1E;AACA,OAAO,KAAKC,KAAZ,MAAuB,kBAAvB;AACA,SAASC,iBAAT,EAA4BC,aAA5B,QAAiD,YAAjD;AAEA,MAAMC,OAAO,GAAG,EAAhB;;AAEA,UAAUC,cAAV,CAAyBC,MAAzB,EAAiC;AACjC;AACI,MAAI;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAeC,IAAI,CAACC,SAAL,CAAeJ,MAAf,CAA3B;AACA,QAAIK,QAAQ,GAAG,EAAf;AACAA,IAAAA,QAAQ,CAACC,SAAT,GAAqB,SAArB,CAHA,CAGgC;;AAChCD,IAAAA,QAAQ,CAACE,QAAT,GAAoB,GAApB,CAJA,CAIyB;;AACzBF,IAAAA,QAAQ,CAACG,GAAT,GAAe,IAAf;AACA,UAAMC,aAAa,GAAG,KAAtB;AACA,UAAMC,QAAQ,GAAGZ,OAAO,GAAG,OAA3B;AAAmC;AACnC,UAAMa,QAAQ,GAAG,MAAMvB,IAAI,CAACQ,iBAAD,EAAoBc,QAApB,EAA8B,EAA9B,EAAkC,EAAlC,CAA3B;AAGA,UAAME,MAAM,GAAG,MAAMD,QAAQ,CAACE,IAAT,EAArB;AACAZ,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAQU,MAAM,CAACE,cAA3B;AACAb,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAcC,IAAI,CAACC,SAAL,CAAeQ,MAAf,CAA1B;AACAX,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAgBU,MAA5B;;AACA,QAAGA,MAAM,CAACG,KAAV,EAAiB;AACb,YAAM1B,GAAG,CAAE;AAAE2B,QAAAA,IAAI,EAAE,0BAAR;AAAoCD,QAAAA,KAAK,EAAEH,MAAM,CAACG;AAAlD,OAAF,CAAT;AACH,KAFD,MAGK;AACD,YAAM1B,GAAG,CAAE;AAAE2B,QAAAA,IAAI,EAAErB,KAAK,CAACsB,2BAAd;AAA2CL,QAAAA;AAA3C,OAAF,CAAT;AACH;AACJ,GArBD,CAsBA,OAAMG,KAAN,EAAa;AACTd,IAAAA,OAAO,CAACC,GAAR,CAAYa,KAAZ;AACH;AACJ;;AAED,eAAe,UAAUG,QAAV,GAAqB;AAChC,QAAMxB,UAAU,CAACC,KAAK,CAACwB,UAAP,EAAmBpB,cAAnB,CAAhB;AAEAE,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACH","sourcesContent":["import { takeEvery, call, put, select, take, fork, all, takeLatest } from 'redux-saga/effects';\r\nimport * as Types from '../actions/types';\r\nimport { getDataFromServer, deleteTodoAPI } from '../service';\r\n\r\nconst baseURL = '';\r\n\r\nfunction* fetchLoginUser(action) {\r\n// function to make service call \r\n    try {\r\n        console.log(\"Action -> \" + JSON.stringify(action));\r\n        let formBody = {}\r\n        formBody.firstName = \"Juveria\"; // action.code\r\n        formBody.lastName = \"S\"; //action.provider\r\n        formBody.age = \"24\"\r\n        const requestMethod = \"GET\";\r\n        const loginURL = baseURL + '/view';;\r\n        const response = yield call(getDataFromServer, loginURL, '', '')\r\n\r\n\r\n        const result = yield response.json();\r\n        console.log(\"ADS\" + result.workingDetails);\r\n        console.log(\"Result ->\" + JSON.stringify(result))\r\n        console.log('Result JSON' + result);\r\n        if(result.error) {\r\n            yield put ({ type: \"LOGIN_USER_RESPONSE_FAIL\", error: result.error });\r\n        }\r\n        else {\r\n            yield put ({ type: Types.LOGIN_USER_RESPONSE_SUCCESS, result });\r\n        }\r\n    }\r\n    catch(error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport default function* rootSaga() {\r\n    yield takeLatest(Types.LOGIN_USER, fetchLoginUser);\r\n\r\n    console.log(\" Root Saga\");\r\n}"]},"metadata":{},"sourceType":"module"}