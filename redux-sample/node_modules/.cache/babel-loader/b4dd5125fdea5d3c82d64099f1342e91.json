{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\juver\\\\codingStuff\\\\reactJS\\\\redux-sample\\\\src\\\\App.js\";\nimport React from 'react'; // import { Formik, Form, Field, ErrorMessage } from \"formik\";\n\nimport \"./App.css\";\nimport logo from \"./logo.svg\";\nimport { Form, Input, Button } from \"antd\"; // import { Tooltip, Select, Checkbox } from \"antd\";\n// import Icon from '@ant-design/icons';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onTextChange = e => {\n      const name = e.target.name;\n      const value = e.target.value;\n      this.setState((prevState, prevProps) => {\n        return {\n          [name]: value\n        };\n      });\n    };\n\n    this.isValid = () => {\n      const {\n        username,\n        password\n      } = this.state;\n\n      if (username.length === 0 || password.length === 0) {\n        this.state({\n          isValid: false,\n          errorMessage: \"Cannot leave fields empty\"\n        });\n        return false;\n      }\n\n      return true;\n    };\n\n    this.onSubmit = e => {\n      e.preventDefault();\n      const {\n        username,\n        password\n      } = this.state;\n\n      if (this.isValid()) {\n        this.props.dispatch(loginUser(username, password));\n      }\n    };\n\n    this.state = {\n      username: \"\",\n      password: \"\"\n    };\n  }\n\n  static getDerivedStateFromProps(newProps, prevState) {\n    if (newProps.result !== prevState.result) {\n      console.log(newProps.result);\n    }\n\n    return null;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(Formik, {\n        initialValues: {\n          email: \"\",\n          password: \"\"\n        },\n        validate: values => {\n          const errors = {};\n\n          if (!values.email) {\n            errors.email = \"Required\";\n          } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)) {\n            errors.email = \"Invalid email address\";\n          }\n\n          return errors;\n        },\n        onSubmit: (values, {\n          setSubmitting\n        }) => {\n          setTimeout(() => {\n            alert(JSON.stringify(values, null));\n            setSubmitting(false);\n          }, 400);\n        },\n        children: ({\n          isSubmitting\n        }) => /*#__PURE__*/_jsxDEV(Form, {\n          children: [/*#__PURE__*/_jsxDEV(Field, {\n            type: \"email\",\n            name: \"email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n            name: \"email\",\n            component: \"div\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Field, {\n            type: \"password\",\n            name: \"password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n            name: \"password\",\n            component: \"div\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            disabled: isSubmitting,\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App; //         <Form className = \"form-inside-input\" onSubmit = {this.onSubmit} noValidate>\n//         <Input name = \"username\" value = {this.state.username} onChange = {this.onTextChange} placeholder=\"Enter your username\" required/>\n//         <Input.Password name = \"password\" value={this.state.password}  onChange = {this.onTextChange} placeholder=\"Enter your password\" required />\n//         <Button type=\"primary\" onClick={this.onSubmit}>Submit</Button>\n//         </Form>","map":{"version":3,"sources":["C:/Users/juver/codingStuff/reactJS/redux-sample/src/App.js"],"names":["React","Form","Input","Button","App","Component","constructor","props","onTextChange","e","name","target","value","setState","prevState","prevProps","isValid","username","password","state","length","errorMessage","onSubmit","preventDefault","dispatch","loginUser","getDerivedStateFromProps","newProps","result","console","log","render","email","values","errors","test","setSubmitting","setTimeout","alert","JSON","stringify","isSubmitting"],"mappings":"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","sourcesContent":["import React from 'react';\r\n// import { Formik, Form, Field, ErrorMessage } from \"formik\";\r\nimport \"./App.css\";\r\nimport logo from './logo.svg';\r\nimport { Form, Input, Button } from \"antd\";\r\n// import { Tooltip, Select, Checkbox } from \"antd\";\r\n// import Icon from '@ant-design/icons';\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      username: \"\",\r\n      password: \"\",\r\n    };\r\n  }\r\n\r\n  onTextChange = (e) => {\r\n      const name = e.target.name;\r\n      const value = e.target.value;\r\n      this.setState((prevState, prevProps) => {\r\n        return {[name] : value}\r\n      })\r\n  }\r\n\r\n\r\n  isValid = () => {\r\n    const {username, password} = this.state;\r\n    if(username.length === 0 || password.length === 0){\r\n      this.state({ isValid : false, errorMessage : \"Cannot leave fields empty\"});\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  onSubmit = e => {\r\n      e.preventDefault();\r\n      const { username, password } = this.state;\r\n      if(this.isValid()) {\r\n        this.props.dispatch(loginUser(username, password));\r\n      }\r\n  };\r\n\r\n  static getDerivedStateFromProps(newProps, prevState) {\r\n    if(newProps.result !== prevState.result) {\r\n      console.log(newProps.result);\r\n    }\r\n    return null;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Formik\r\n          initialValues={{ email: \"\", password: \"\" }}\r\n          validate={(values) => {\r\n            const errors = {};\r\n            if (!values.email) {\r\n              errors.email = \"Required\";\r\n            } else if (\r\n              !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\r\n            ) {\r\n              errors.email = \"Invalid email address\";\r\n            }\r\n            return errors;\r\n          }}\r\n          onSubmit={(values, { setSubmitting }) => {\r\n            setTimeout(() => {\r\n              alert(JSON.stringify(values, null));\r\n              setSubmitting(false);\r\n            }, 400);\r\n          }}\r\n        >\r\n          {({ isSubmitting }) => (\r\n            <Form>\r\n              <Field type=\"email\" name=\"email\" />\r\n              <ErrorMessage name=\"email\" component=\"div\" />\r\n              <Field type=\"password\" name=\"password\" />\r\n              <ErrorMessage name=\"password\" component=\"div\" />\r\n              <button type=\"submit\" disabled={isSubmitting}>\r\n                Submit\r\n              </button>\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\n//         <Form className = \"form-inside-input\" onSubmit = {this.onSubmit} noValidate>\r\n\r\n//         <Input name = \"username\" value = {this.state.username} onChange = {this.onTextChange} placeholder=\"Enter your username\" required/>\r\n\r\n//         <Input.Password name = \"password\" value={this.state.password}  onChange = {this.onTextChange} placeholder=\"Enter your password\" required />\r\n\r\n//         <Button type=\"primary\" onClick={this.onSubmit}>Submit</Button>\r\n\r\n//         </Form>\r\n"]},"metadata":{},"sourceType":"module"}