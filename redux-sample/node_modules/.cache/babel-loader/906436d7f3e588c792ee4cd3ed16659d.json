{"ast":null,"code":"// (state, action) => newState\n// contains logic and global state of your application\nimport * as Types from \"../actions/types\"; // importing types that are used \n\nconst initialState = {\n  // creating an initial state for login component\n  \"loggedIn\": false,\n  \"isValidToken\": false,\n  \"result\": {},\n  \"user\": {\n    \"email\": \"\",\n    \"displayName\": \"\",\n    \"emailVerified\": false,\n    \"lastLoggedInAt\": \"\"\n  }\n}; // create function to return state object\n\nconst handleLoginServerResponseSuccess = (state, action) => {\n  console.log(\"Redux\" + JSON.stringify(action));\n  let newState = { ...state\n  };\n\n  if (action.result !== undefined) {\n    newState = Object.assign({}, state, {\n      \"result\": Object.assign({}, action.result)\n    });\n  }\n\n  console.log(\"State changes to\" + JSON.stringify(newState));\n  return { ...newState\n  };\n};\n\nconst handleLoginServerResponseFail = (state, action) => {\n  let newState = { ...state\n  };\n  return { ...newState\n  };\n}; // root reducer is responsible for handling actions, and updating state\n\n\nexport default ((state = initialState, action) => {\n  // we use initialState as a default value\n  switch (action.type) {\n    // reducer looks at action.type field to understand what's happening\n    case Types.LOGIN_USER:\n      return Object.assign({}, state, {\n        \"loggedIn\": false,\n        \"isValidToken\": false\n      });\n\n    case Types.LOGIN_USER_SERVER_RESPONSE_FAIL:\n      return handleLoginServerResponseFail(state);\n\n    case Types.LOGIN_USER_SERVER_RESPONSE_SUCCESS:\n      return handleLoginServerResponseSuccess(state, action);\n\n    default:\n      // if reducer doesn't recognize action type, or it doesn't care\n      return state;\n    // we return whichever state reducer thinks it needs\n  }\n});","map":{"version":3,"sources":["C:/Users/juver/codingStuff/reactJS/redux-sample/src/redux/reducers/login.js"],"names":["Types","initialState","handleLoginServerResponseSuccess","state","action","console","log","JSON","stringify","newState","result","undefined","Object","assign","handleLoginServerResponseFail","type","LOGIN_USER","LOGIN_USER_SERVER_RESPONSE_FAIL","LOGIN_USER_SERVER_RESPONSE_SUCCESS"],"mappings":"AAAA;AACA;AAEA,OAAO,KAAKA,KAAZ,MAAuB,kBAAvB,C,CACA;;AAEA,MAAMC,YAAY,GAAG;AACjB;AACD,cAAY,KAFM;AAGlB,kBAAgB,KAHE;AAIlB,YAAU,EAJQ;AAKlB,UAAQ;AACJ,aAAS,EADL;AAEJ,mBAAe,EAFX;AAGJ,qBAAkB,KAHd;AAIJ,sBAAkB;AAJd;AALU,CAArB,C,CAcA;;AAEA,MAAMC,gCAAgC,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACxDC,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAUC,IAAI,CAACC,SAAL,CAAeJ,MAAf,CAAtB;AACA,MAAIK,QAAQ,GAAG,EAAE,GAAGN;AAAL,GAAf;;AACA,MAAIC,MAAM,CAACM,MAAP,KAAkBC,SAAtB,EAAiC;AAC7BF,IAAAA,QAAQ,GAAGG,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBV,KAAlB,EAAyB;AAAE,gBAAWS,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBT,MAAM,CAACM,MAAzB;AAAb,KAAzB,CAAX;AACH;;AACDL,EAAAA,OAAO,CAACC,GAAR,CAAY,qBAAqBC,IAAI,CAACC,SAAL,CAAeC,QAAf,CAAjC;AACA,SAAO,EAAE,GAAGA;AAAL,GAAP;AACH,CARD;;AAUA,MAAMK,6BAA6B,GAAG,CAACX,KAAD,EAAQC,MAAR,KAAmB;AACrD,MAAIK,QAAQ,GAAG,EAAE,GAAGN;AAAL,GAAf;AACA,SAAO,EAAE,GAAGM;AAAL,GAAP;AACH,CAHD,C,CAKA;;;AAEA,gBAAe,CAACN,KAAK,GAAGF,YAAT,EAAuBG,MAAvB,KAAkC;AAC7C;AACA,UAAQA,MAAM,CAACW,IAAf;AACI;AACF,SAAKf,KAAK,CAACgB,UAAX;AACE,aAAOJ,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBV,KAAlB,EAAyB;AAAE,oBAAY,KAAd;AAAqB,wBAAgB;AAArC,OAAzB,CAAP;;AACF,SAAKH,KAAK,CAACiB,+BAAX;AACE,aAAOH,6BAA6B,CAACX,KAAD,CAApC;;AACF,SAAKH,KAAK,CAACkB,kCAAX;AACE,aAAOhB,gCAAgC,CAACC,KAAD,EAAQC,MAAR,CAAvC;;AACF;AACI;AACF,aAAOD,KAAP;AACC;AAXL;AAcD,CAhBH","sourcesContent":["// (state, action) => newState\r\n// contains logic and global state of your application\r\n\r\nimport * as Types from \"../actions/types\";\r\n// importing types that are used \r\n\r\nconst initialState = {\r\n    // creating an initial state for login component\r\n   \"loggedIn\": false,\r\n   \"isValidToken\": false,\r\n   \"result\": {},\r\n   \"user\": {\r\n       \"email\": \"\",\r\n       \"displayName\": \"\",\r\n       \"emailVerified\" : false,\r\n       \"lastLoggedInAt\": \"\", \r\n   }\r\n\r\n};\r\n\r\n// create function to return state object\r\n\r\nconst handleLoginServerResponseSuccess = (state, action) => {\r\n    console.log(\"Redux\" + JSON.stringify(action));\r\n    let newState = { ...state };\r\n    if (action.result !== undefined) {\r\n        newState = Object.assign({}, state, { \"result\" : Object.assign({}, action.result)})\r\n    }\r\n    console.log(\"State changes to\" + JSON.stringify(newState));\r\n    return { ...newState };\r\n}\r\n\r\nconst handleLoginServerResponseFail = (state, action) => {\r\n    let newState = { ...state };\r\n    return { ...newState };\r\n}\r\n\r\n// root reducer is responsible for handling actions, and updating state\r\n\r\nexport default (state = initialState, action) => {\r\n    // we use initialState as a default value\r\n    switch (action.type) {\r\n        // reducer looks at action.type field to understand what's happening\r\n      case Types.LOGIN_USER:\r\n        return Object.assign({}, state, { \"loggedIn\": false, \"isValidToken\": false }); \r\n      case Types.LOGIN_USER_SERVER_RESPONSE_FAIL:\r\n        return handleLoginServerResponseFail(state);\r\n      case Types.LOGIN_USER_SERVER_RESPONSE_SUCCESS:\r\n        return handleLoginServerResponseSuccess(state, action);       \r\n      default:\r\n          // if reducer doesn't recognize action type, or it doesn't care\r\n        return state;\r\n         // we return whichever state reducer thinks it needs\r\n\r\n    }\r\n  }"]},"metadata":{},"sourceType":"module"}